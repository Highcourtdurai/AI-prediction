import warnings
warnings.filterwarnings('ignore')
import pandas as pd  
import numpy as np
import seaborn as sns
#from sklearn.svm import SVC
#from sklearn.model_selection import KFold
from sklearn import preprocessing
import matplotlib.pyplot as plt

data=pd.read_csv('android.csv')

print(data.shape)

data = data.sample(frac=1).reset_index(drop=True)

print(data.head())

import seaborn as sns

sns.countplot(x='malware',data=data)

#Over sampling

target_count = data.malware.value_counts()
print('Class 0:', target_count[0])
print('Class 1:', target_count[1])

count_class_0, count_class_1 = data.malware.value_counts()

df_class_0 = data[data['malware'] == 0]
df_class_1 = data[data['malware'] == 1]

df_class_1_over = df_class_1.sample(count_class_0, replace=True)
df_test_over = pd.concat([df_class_0, df_class_1_over], axis=0)

print(df_test_over.shape)

sns.countplot(x='malware',data=df_test_over)

X=df_test_over.iloc[:,df_test_over.columns !='malware']
Y=df_test_over.iloc[:,df_test_over.columns =="malware"]

print(X.head())


print(Y.head())

from sklearn.utils import shuffle

X, Y=shuffle(X, Y)

print(X.head())


X=X.drop(columns='name')
print(X.head())
print(Y.head())


from sklearn.feature_selection import SelectKBest
from sklearn.feature_selection import chi2

bestfeatures = SelectKBest(score_func=chi2, k=10)
fit = bestfeatures.fit(X,Y)
dfscores = pd.DataFrame(fit.scores_)
dfcolumns = pd.DataFrame(X.columns)

featureScores = pd.concat([dfcolumns,dfscores],axis=1)
featureScores.columns = ['Specs','Score']  
featureScores.nlargest(10,'Score')


from sklearn.ensemble import ExtraTreesClassifier
import matplotlib.pyplot as plt
model = ExtraTreesClassifier()
model.fit(X,Y)
print(model.feature_importances_) #use inbuilt class feature_importances of tree based classifiers
#plot graph of feature importances for better visualization
feat_importances = pd.Series(model.feature_importances_, index=X.columns)
feat_importances.nlargest(10).plot(kind='barh')
plt.show()

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X,Y, test_size = 0.2, random_state=0)

print(X_train.shape)

print(X_train.head())

print(y_train.head())

from sklearn import metrics
from sklearn.metrics import confusion_matrix

from sklearn.tree import DecisionTreeClassifier

tree = DecisionTreeClassifier()

tree.fit(X_train,y_train)

DecisionTreeClassifier()

y_pred = tree.predict(X_test)
print(y_pred)


model2=metrics.accuracy_score(y_test,y_pred)
print(model2)

cnf_matrix = confusion_matrix(y_test,y_pred)

labels = [0,1]
sns.heatmap(cnf_matrix, annot=True, cmap="YlGnBu", fmt=".3f", xticklabels=labels, yticklabels=labels)
plt.show()




